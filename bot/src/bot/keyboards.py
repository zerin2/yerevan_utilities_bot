from dataclasses import dataclass
from enum import Enum

from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from enums.scene_enums import SceneName, Utility
from enums.setting_enums import NoticeInterval, NoticeState, NoticeType

from bot.crud.composite_manager import CompositeManager
from db.core import async_session

CALLBACK_DATA_ACCOUNT_KEYBOARD = [
    SceneName.DATA.check,
    SceneName.LIST_UTILITIES.display,
    SceneName.REQUEST_READING.get,

]
EDITOR_ACCOUNT_BUTTONS = [
    (Utility.ELECTRICITY.value, SceneName.ELECTRICITY.editor),
    (Utility.GAS.value, SceneName.GAS.editor),
    (Utility.GAS_SERVICE.value, SceneName.GAS_SERVICE.editor),
    (Utility.WATER.value, SceneName.WATER.editor),
    # (Utility.VIVA_MTS.value, SceneName.VIVA_MTS.editor),
    # (Utility.TEAM_TELECOM.value, SceneName.TEAM_TELECOM.editor),
    # (Utility.U_COM.value, SceneName.U_COM.editor),
    # (Utility.OVIO.value, SceneName.OVIO.editor),
]


class KeyboardText(Enum):
    CHECK_DEBT = '–ú–æ–∏ —Å—á–µ—Ç–∞ üßæ'
    UPDATE_DEBT = '–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å üîÑ'
    ADD_ACCOUNTS = '–î–æ–±–∞–≤–∏—Ç—å –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç üìã'
    CHANGE_ID = '–î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç ‚úèÔ∏è'
    SETTINGS = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è'
    REQUEST_READING = '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è üì©'
    CHANGE_NOTICE_INTERVAL = '–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üïí'
    CHANGE_NOTICE_STATE = '–í–∫–ª./–í—ã–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîî'
    USUAL_REVIEW = '–û—Ç–∑—ã–≤ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ üí¨'
    FOUND_ERROR = '–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚ö†Ô∏è'
    CHECK_ACCOUNT = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç üëÄ'


class KeyboardCMD(Enum):
    CHECK_DEBT = 'check_debt'
    UPDATE_DEBT = 'update_debt'
    ADD_ACCOUNTS = 'add_accounts'
    CHANGE_ID = 'change_id'
    SETTINGS = 'settings'


class KeyboardIcon(Enum):
    EMPTY = '‚ö™'
    FILLED = '‚úÖ'


@dataclass
class KeyboardStatusAccount:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ —Å—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–Ω–æ–ø–æ–∫.

    Attributes:
        user_id (str): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    """

    user_id: str

    async def get_account_values(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–∏ - —Ç–∏–ø—ã —Å—á–µ—Ç–æ–≤ (–Ω–∞–ø—Ä. "electricity"),
            –∞ –∑–Ω–∞—á–µ–Ω–∏—è - —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.

        """
        async with async_session() as session:
            user_repo = CompositeManager(session)
            account_values = await user_repo.get_all_account_by_tg_id(str(self.user_id))
            return account_values or {}

    async def get_status_button(self, button: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å—á–µ—Ç–∞.
        SceneName.to_utility_name(button) - –ø–æ–ª—É—á–∞–µ–º –∏–º—è –º–æ–¥–µ–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é callback_data.

        Args:
            button (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ (—Ç–∏–ø —Å—á–µ—Ç–∞).

        Returns:
            str: –ó–Ω–∞—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–µ–π —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
                - KeyboardIcon.EMPTY.value ('‚ö™'), –µ—Å–ª–∏ —Å—á–µ—Ç –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω.
                - KeyboardIcon.FILLED.value ('‚úÖ'), –µ—Å–ª–∏ —Å—á–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω.

        """
        if button is None:
            button = ''

        account_values = await self.get_account_values()
        button_name = SceneName.to_utility_name(button)
        for account_name, account_value in account_values.items():
            if button_name == account_name:
                if account_value is None:
                    return KeyboardIcon.EMPTY.value
                return KeyboardIcon.FILLED.value


def main_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=KeyboardText.UPDATE_DEBT.value),
             KeyboardButton(text=KeyboardText.CHECK_DEBT.value)],
            [KeyboardButton(text=KeyboardText.CHANGE_ID.value),
             KeyboardButton(text=KeyboardText.SETTINGS.value)],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
    )


def mini_main_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=KeyboardText.CHANGE_ID.value),
             KeyboardButton(text=KeyboardText.SETTINGS.value)],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
    )


def add_accounts() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=KeyboardText.ADD_ACCOUNTS.value,
                callback_data=SceneName.LIST_UTILITIES.display)],
        ],
    )


def display_debt() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=KeyboardText.CHECK_DEBT.value,
                                  callback_data=KeyboardCMD.CHECK_DEBT.value)],
        ],
    )


async def display_accounts_list(user_id: str) -> InlineKeyboardMarkup:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user_id (str): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –≥–¥–µ –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞
        –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å (–ø—É—Å—Ç–æ–π –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π) —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å—á–µ—Ç–∞.

    """
    keyboard_repo = KeyboardStatusAccount(user_id)
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=await keyboard_repo.get_status_button(data) + ' ' + text,
                    callback_data=data,
                ),
            ] for text, data in EDITOR_ACCOUNT_BUTTONS
        ],
    )


def check_or_add_or_request_account() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=KeyboardText.CHECK_ACCOUNT.value,
                callback_data=SceneName.DATA.check)],
            [InlineKeyboardButton(
                text=KeyboardText.ADD_ACCOUNTS.value,
                callback_data=SceneName.LIST_UTILITIES.display)],
            [InlineKeyboardButton(
                text=KeyboardText.REQUEST_READING.value,
                callback_data=SceneName.REQUEST_READING.get)],
        ],
    )


def change_setting_interval_notice() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=KeyboardText.CHANGE_NOTICE_STATE.value,
                callback_data=SceneName.NOTICE_STATE.editor)],
            [InlineKeyboardButton(
                text=KeyboardText.CHANGE_NOTICE_INTERVAL.value,
                callback_data=SceneName.NOTICE_INTERVAL.editor)],
        ],
    )


def display_notice_state() -> InlineKeyboardMarkup:
    """
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=NoticeState.to_human(state.value),  # noqa
                    callback_data=state.value  # noqa
                ),
            ] for state in NoticeState
        ],
    )


def display_notice_type() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏,
        —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–∏–ø–∞–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.

    """
    buttons = []
    for interval in NoticeType:
        text = NoticeType.to_human(interval.value)  # noqa
        value = interval.value  # noqa
        if value == NoticeType.PERIOD.value:
            text += ' —É–∫–∞–∂–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π'
        buttons.append(InlineKeyboardButton(
            text=text,
            callback_data=value,
        ))
    return InlineKeyboardMarkup(inline_keyboard=[[button] for button in buttons])


def chunks(lst: list, n: int):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏ (—á–∞–Ω–∫–∏) –¥–ª–∏–Ω–æ–π `n` —ç–ª–µ–º–µ–Ω—Ç–æ–≤.

    info: range(start, stop, step)

    Args:
        lst (list): –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å.
        n (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–º —á–∞–Ω–∫–µ (–≥—Ä—É–ø–ø–µ).

    Yields:
        list: –ü–æ–¥—Å–ø–∏—Å–æ–∫ –¥–ª–∏–Ω–æ–π –¥–æ `n` —ç–ª–µ–º–µ–Ω—Ç–æ–≤.

    –ü—Ä–∏–º–µ—Ä:
    1)
    lst = ['a', 'b', 'c', 'd', 'e', 'f']
    n = 2
    result:
    i = 0  ‚Üí chunk = lst[0:2] ‚Üí ['a', 'b']
    i = 2  ‚Üí chunk = lst[2:4] ‚Üí ['c', 'd']
    i = 4  ‚Üí chunk = lst[4:6] ‚Üí ['e', 'f']
    ...
    [['a', 'b'], ['c', 'd'], ['e', 'f']]

    2)
        list(chunks([1, 2, 3, 4, 5], 2))
        ...
        [[1, 2], [3, 4], [5]]

    """
    for i in range(0, len(lst), n):
        yield lst[i:i + n]


def start_flag() -> str:
    return '_start'


def end_flag() -> str:
    return '_end'


def list_notice_hours(n_rows: int, flag: str):
    """–°–æ–∑–¥–∞—ë—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏.

    Args:
        n_rows (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
        flag (str): —Ñ–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ü–µ–Ω—ã.

    Returns:
        list[list[InlineKeyboardButton]]: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã,
        –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ `n_rows` –∫–Ω–æ–ø–æ–∫.

    """
    buttons = [
        InlineKeyboardButton(
            text=NoticeInterval.to_human(interval.value),  # noqa
            callback_data=interval.name + (start_flag() if flag == 'start' else end_flag())  # noqa
        )
        for interval in NoticeInterval
    ]
    return list(chunks(buttons, n_rows))


def display_notice_hours(rows: int, flag: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è. flag: start | end"""
    return InlineKeyboardMarkup(inline_keyboard=list_notice_hours(rows, flag))


def feedback_additional() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=KeyboardText.USUAL_REVIEW.value,
                callback_data=SceneName.USUAL_REVIEW.editor)],
            [InlineKeyboardButton(
                text=KeyboardText.FOUND_ERROR.value,
                callback_data=SceneName.FOUND_ERROR.editor)],
        ],
    )
